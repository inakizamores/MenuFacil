name: Create Test Users

on:
  workflow_dispatch:  # Manual trigger with options
    inputs:
      user_type:
        type: choice
        description: 'Type of users to create'
        required: true
        default: 'standard'
        options:
          - standard
          - restaurant
          - all

jobs:
  create-users:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd scripts
          npm install @supabase/supabase-js

      - name: Create users script
        run: |
          cat > scripts/create-users-workflow.js << 'EOL'
          // Script to create test users for MenúFácil and output to Markdown
          const fs = require('fs');
          const path = require('path');
          const { createClient } = require('@supabase/supabase-js');

          // Constants
          const SUPABASE_URL = 'https://aejxheybvxbwvjuyfhfh.supabase.co';
          const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
          const USER_TYPE = process.env.USER_TYPE || 'all';
          
          // Output file
          const outputFile = path.join(__dirname, '../test-users.md');
          
          async function createUsers() {
            console.log(`Creating ${USER_TYPE} test users...`);
            
            // Create Supabase client
            const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
            
            // Initialize our output
            let mdOutput = `# MenuFácil Test Users\n\n`;
            mdOutput += `*Generated on ${new Date().toLocaleString()}*\n\n`;
            
            try {
              // Test connection
              await supabase.from('profiles').select('count', { count: 'exact' }).limit(1);
              console.log('✅ Connected to Supabase successfully');
              
              // Standard test users (customer, restaurant, admin)
              const standardUsers = [
                {
                  email: 'test@example.com',
                  password: 'password123',
                  full_name: 'Test User',
                  user_type: 'customer'
                },
                {
                  email: 'restaurant@example.com',
                  password: 'password123',
                  full_name: 'Restaurant Owner',
                  user_type: 'restaurant'
                },
                {
                  email: 'admin@example.com',
                  password: 'password123',
                  full_name: 'Admin User',
                  user_type: 'admin'
                }
              ];
              
              // Additional restaurant users and staff
              const restaurantUsers = [
                {
                  email: 'restaurant1@example.com',
                  password: 'password123',
                  full_name: 'Restaurant Owner 1',
                  user_type: 'restaurant'
                },
                {
                  email: 'restaurant2@example.com',
                  password: 'password123',
                  full_name: 'Restaurant Owner 2',
                  user_type: 'restaurant'
                },
                {
                  email: 'manager1@example.com',
                  password: 'password123',
                  full_name: 'Restaurant Manager 1',
                  user_type: 'staff',
                  role: 'manager'
                },
                {
                  email: 'waiter1@example.com',
                  password: 'password123',
                  full_name: 'Waiter 1',
                  user_type: 'staff',
                  role: 'waiter'
                },
                {
                  email: 'kitchen1@example.com',
                  password: 'password123',
                  full_name: 'Kitchen Staff 1',
                  user_type: 'staff',
                  role: 'kitchen'
                }
              ];
              
              // Determine which users to create
              let usersToCreate = [];
              if (USER_TYPE === 'standard' || USER_TYPE === 'all') {
                usersToCreate = usersToCreate.concat(standardUsers);
              }
              if (USER_TYPE === 'restaurant' || USER_TYPE === 'all') {
                usersToCreate = usersToCreate.concat(restaurantUsers);
              }
              
              // Create users and add to markdown
              mdOutput += `## Available Test Users\n\n`;
              
              // Group users by type
              const usersByType = {
                'customer': [],
                'restaurant': [],
                'admin': [],
                'staff': []
              };
              
              // Create each user
              for (const user of usersToCreate) {
                console.log(`Creating user: ${user.email}...`);
                
                // Create the auth user
                const { data: userData, error: userError } = await supabase.auth.admin.createUser({
                  email: user.email,
                  password: user.password,
                  email_confirm: true,
                  user_metadata: { 
                    full_name: user.full_name,
                    user_type: user.user_type,
                    role: user.role || null
                  }
                });
                
                if (userError) {
                  if (userError.message.includes('already exists')) {
                    console.log(`User already exists: ${user.email}`);
                    // Add to user list anyway (it exists in the system)
                    if (usersByType[user.user_type]) {
                      usersByType[user.user_type].push(user);
                    }
                  } else {
                    console.log(`Error creating user: ${userError.message}`);
                  }
                } else {
                  console.log(`Created user: ${user.email}`);
                  
                  // Create profile record
                  const userId = userData.user.id;
                  const profileData = {
                    id: userId,
                    full_name: user.full_name,
                    user_type: user.user_type
                  };
                  
                  // Add role if it exists
                  if (user.role) {
                    profileData.role = user.role;
                  }
                  
                  const { error: profileError } = await supabase
                    .from('profiles')
                    .insert([profileData]);
                    
                  if (profileError) {
                    console.log(`Could not create profile: ${profileError.message}`);
                  }
                  
                  // Add to our user list for the markdown
                  if (usersByType[user.user_type]) {
                    usersByType[user.user_type].push(user);
                  }
                }
              }
              
              // Add users to markdown by type
              if (usersByType.customer.length > 0) {
                mdOutput += `### Customers\n\n`;
                mdOutput += `| Email | Password | Full Name |\n`;
                mdOutput += `| ----- | -------- | --------- |\n`;
                usersByType.customer.forEach(user => {
                  mdOutput += `| ${user.email} | ${user.password} | ${user.full_name} |\n`;
                });
                mdOutput += `\n`;
              }
              
              if (usersByType.restaurant.length > 0) {
                mdOutput += `### Restaurant Owners\n\n`;
                mdOutput += `| Email | Password | Full Name |\n`;
                mdOutput += `| ----- | -------- | --------- |\n`;
                usersByType.restaurant.forEach(user => {
                  mdOutput += `| ${user.email} | ${user.password} | ${user.full_name} |\n`;
                });
                mdOutput += `\n`;
              }
              
              if (usersByType.admin.length > 0) {
                mdOutput += `### Administrators\n\n`;
                mdOutput += `| Email | Password | Full Name |\n`;
                mdOutput += `| ----- | -------- | --------- |\n`;
                usersByType.admin.forEach(user => {
                  mdOutput += `| ${user.email} | ${user.password} | ${user.full_name} |\n`;
                });
                mdOutput += `\n`;
              }
              
              if (usersByType.staff.length > 0) {
                mdOutput += `### Staff Members\n\n`;
                mdOutput += `| Email | Password | Full Name | Role |\n`;
                mdOutput += `| ----- | -------- | --------- | ---- |\n`;
                usersByType.staff.forEach(user => {
                  mdOutput += `| ${user.email} | ${user.password} | ${user.full_name} | ${user.role || 'N/A'} |\n`;
                });
                mdOutput += `\n`;
              }
              
              mdOutput += `## How to Use\n\n`;
              mdOutput += `1. Go to [MenuFácil](https://menufacil.vercel.app/) (or your deployed instance)\n`;
              mdOutput += `2. Click on "Login" and enter the credentials from above\n`;
              mdOutput += `3. Each user type has different permissions and UI experiences\n\n`;
              mdOutput += `> Note: These are test users and should not be used in production environments.\n`;
              
              // Write to file
              fs.writeFileSync(outputFile, mdOutput);
              console.log(`✅ Test users information saved to ${outputFile}`);
              
              // Also output to console for GitHub Actions logs
              console.log('\n\n' + mdOutput);
              
            } catch (error) {
              console.error(`Error: ${error.message}`);
              process.exit(1);
            }
          }
          
          // Run the function
          createUsers();
          EOL

      - name: Create test users and generate report
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          USER_TYPE: ${{ github.event.inputs.user_type }}
        run: |
          cd scripts
          echo "Creating test users with type: $USER_TYPE"
          node create-users-workflow.js
          
      - name: Upload test users file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-users
          path: test-users.md
          retention-days: 30 